Import('env')

env_riscv = env.Clone()

env_riscv.Append(CPPPATH=["#modules/riscv", "thirdparty/libriscv/lib"])
env_riscv.Append(CPPDEFINES=["_DARWIN_C_SOURCE"])

env_riscv.Append(CXXFLAGS=["-std=c++20"])

src_list = [
    "thirdparty/libriscv/lib/libriscv/rv64i.cpp",
    "thirdparty/libriscv/lib/libriscv/cpu.cpp",
    "thirdparty/libriscv/lib/libriscv/debug.cpp",
    "thirdparty/libriscv/lib/libriscv/decode_bytecodes.cpp",
    "thirdparty/libriscv/lib/libriscv/decoder_cache.cpp",
    "thirdparty/libriscv/lib/libriscv/machine.cpp",
    "thirdparty/libriscv/lib/libriscv/machine_defaults.cpp",
    "thirdparty/libriscv/lib/libriscv/memory.cpp",
    "thirdparty/libriscv/lib/libriscv/memory_elf.cpp",
    "thirdparty/libriscv/lib/libriscv/memory_mmap.cpp",
    "thirdparty/libriscv/lib/libriscv/memory_rw.cpp",
    "thirdparty/libriscv/lib/libriscv/multiprocessing.cpp",
    "thirdparty/libriscv/lib/libriscv/native_libc.cpp",
    "thirdparty/libriscv/lib/libriscv/native_threads.cpp",
    "thirdparty/libriscv/lib/libriscv/posix/minimal.cpp",
    "thirdparty/libriscv/lib/libriscv/posix/signals.cpp",
    "thirdparty/libriscv/lib/libriscv/posix/threads.cpp",
    "thirdparty/libriscv/lib/libriscv/posix/socket_calls.cpp",
    "thirdparty/libriscv/lib/libriscv/serialize.cpp",
    "thirdparty/libriscv/lib/libriscv/util/crc32c.cpp",
    "thirdparty/libriscv/lib/libriscv/linux/system_calls.cpp",
    "riscv_emulator.cpp",
    "register_types.cpp",
]

env_riscv.add_source_files(env_riscv.modules_sources, src_list)
